import pygame
import sys
import random

# Initialize pygame
pygame.init()

# Game constants
WIDTH, HEIGHT = 400, 600
FPS = 60
GRAVITY = 0.25
BIRD_JUMP = -5
PIPE_SPEED = 3
PIPE_GAP = 150
PIPE_FREQUENCY = 1500  # milliseconds

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 128, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
SKY_BLUE = (135, 206, 235)

# Set up the display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Flappy Bird Clone')
clock = pygame.time.Clock()

# Font for score
font = pygame.font.SysFont('Arial', 30)

class Bird:
    def __init__(self):
        self.x = 100
        self.y = HEIGHT // 2
        self.velocity = 0
        self.width = 30
        self.height = 30
        self.alive = True
    
    def jump(self):
        self.velocity = BIRD_JUMP
    
    def update(self):
        # Apply gravity
        self.velocity += GRAVITY
        self.y += self.velocity
        
        # Check boundaries
        if self.y <= 0:
            self.y = 0
            self.velocity = 0
        elif self.y >= HEIGHT - self.height:
            self.y = HEIGHT - self.height
            self.alive = False
    
    def draw(self):
        pygame.draw.rect(screen, YELLOW, (self.x, self.y, self.width, self.height), border_radius=10)
        # Add eye
        pygame.draw.circle(screen, BLACK, (self.x + 20, self.y + 10), 5)
    
    def get_mask(self):
        return pygame.Rect(self.x, self.y, self.width, self.height)

class Pipe:
    def __init__(self):
        self.x = WIDTH
        self.height = random.randint(150, 400)
        self.top_pipe = pygame.Rect(self.x, 0, 50, self.height - PIPE_GAP // 2)
        self.bottom_pipe = pygame.Rect(self.x, self.height + PIPE_GAP // 2, 50, HEIGHT - (self.height + PIPE_GAP // 2))
        self.passed = False
    
    def update(self):
        self.x -= PIPE_SPEED
        self.top_pipe.x = self.x
        self.bottom_pipe.x = self.x
    
    def draw(self):
        pygame.draw.rect(screen, GREEN, self.top_pipe)
        pygame.draw.rect(screen, GREEN, self.bottom_pipe)
    
    def collide(self, bird):
        bird_mask = bird.get_mask()
        return bird_mask.colliderect(self.top_pipe) or bird_mask.colliderect(self.bottom_pipe)

def main():
    bird = Bird()
    pipes = []
    score = 0
    last_pipe = pygame.time.get_ticks()
    game_over = False
    
    while True:
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if not game_over:
                        bird.jump()
                    else:
                        # Reset game
                        bird = Bird()
                        pipes = []
                        score = 0
                        last_pipe = pygame.time.get_ticks()
                        game_over = False
        
        if not game_over:
            # Update bird
            bird.update()
            
            # Generate pipes
            current_time = pygame.time.get_ticks()
            if current_time - last_pipe > PIPE_FREQUENCY:
                pipes.append(Pipe())
                last_pipe = current_time
            
            # Update pipes and check collisions
            for pipe in pipes:
                pipe.update()
                
                # Check if bird passed the pipe
                if not pipe.passed and pipe.x < bird.x:
                    pipe.passed = True
                    score += 1
                
                # Check collision
                if pipe.collide(bird):
                    bird.alive = False
                    game_over = True
            
            # Remove pipes that are off screen
            pipes = [pipe for pipe in pipes if pipe.x > -50]
            
            # Check if bird is alive
            if not bird.alive:
                game_over = True
        
        # Draw everything
        screen.fill(SKY_BLUE)
        
        # Draw ground
        pygame.draw.rect(screen, GREEN, (0, HEIGHT - 20, WIDTH, 20))
        
        # Draw pipes
        for pipe in pipes:
            pipe.draw()
        
        # Draw bird
        bird.draw()
        
        # Draw score
        score_text = font.render(f'Score: {score}', True, BLACK)
        screen.blit(score_text, (10, 10))
        
        # Game over message
        if game_over:
            game_over_text = font.render('Game Over! Press SPACE to restart', True, BLACK)
            screen.blit(game_over_text, (WIDTH // 2 - 180, HEIGHT // 2 - 15))
        
        pygame.display.update()
        clock.tick(FPS)

if __name__ == "__main__":
    main()